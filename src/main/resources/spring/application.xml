<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<beans default-autowire="byName" default-lazy-init="true">

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:application.properties</value>
			</list>
		</property>
	</bean>

	<bean id="sysparam"
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean"
		lazy-init="false">
		<property name="targetObject">
			<bean
				class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetClass" value="java.lang.System" />
				<property name="targetMethod" value="getProperties" />
			</bean>
		</property>
		<property name="targetMethod" value="putAll" />
		<property name="arguments">
			<map>
				<entry key="app.path" value="${app.path}" />
			</map>
		</property>
	</bean>
	
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="${jndi}"/>
	</bean>
	
	<bean id="dataLoader" class="com.fzy.core.DataLoader">
		<property name="dataSource" ref="dataSource"/>
 		<property name="scripts">
			<list>
 				<value>classpath:sql/init-data.sql</value>
			</list>
		</property>
	</bean>
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mappingDirectoryLocations">
			<list>
				<value>classpath*:ge/**/entity/</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<!--<prop key="hibernate.default_schama">${hibernate.default_schama}</prop> -->
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
				<prop key="hibernate.cache.provider_configuration_file_resource_path">ehcache-hibernate-local.xml</prop>
			</props>
		</property>
	</bean>

	<!-- TransactionManager -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>

	<!-- TransactionInterceptor -->
	<bean id="transactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager">
			<ref bean="transactionManager" />
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="get*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="find*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="*">PROPAGATION_REQUIRED,-EXCEPTION</prop>
			</props>
		</property>
	</bean>

	<!-- MethodAdvisor -->
	<!-- <bean id="transactionMethodAdvisor" class="org.springframework.aop.support.NameMatchMethodPointcutAdvisor"> 
		<property name="mappedNames"> <list> <value>*</value> </list> </property> 
		<property name="advice"> <ref bean="transactionInterceptor" /> </property> 
		</bean> -->

	<!-- BeanNameAutoProxyCreator -->
	<bean
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="interceptorNames">
			<value>transactionInterceptor</value>
		</property>
		<property name="beanNames">
			<list>
				<value>*Service</value>
			</list>
		</property>
	</bean>
	
	<bean class="com.fzy.core.SpringContextHolder" lazy-init="false" />
</beans>